@page "/"
@using DevExtreme.AspNet.Data.ResponseModel
@using DevExtreme.AspNet.Data
@using System.Threading
@using System.Threading.Tasks
@using DxDataGridExportingWithReportsClientBlazor.Models
@using System.Net.Http
@using System.Text.Json
@using System.Collections.ObjectModel

<DxDataGrid T="@Products" CustomData="@LoadProductsData" ShowFilterRow="true">
    <Columns>
        <DxDataGridColumn Field="@nameof(Products.ProductName)" />
        <DxDataGridColumn Field="@nameof(Products.CategoryId)" />
        <DxDataGridColumn Field="@nameof(Products.UnitPrice)" />
        <DxDataGridColumn Field="@nameof(Products.UnitsInStock)" />
        <DxDataGridColumn Field="@nameof(Products.UnitsOnOrder)" />
        <DxDataGridCheckBoxColumn Field="@nameof(Products.Discontinued)" />
    </Columns>
</DxDataGrid>
<ExportButtons ExportUrlInfo="@exportUrlInfo"></ExportButtons>

@code {
    private readonly ObservableCollection<Tuple<string, string>> exportUrlInfo = new ObservableCollection<Tuple<string, string>>();
    [Inject] protected HttpClient Client { get; set; }
    private string MyWebApiUrl = "https://localhost:44342/api/Products/";
    protected async Task<LoadResult> LoadProductsData(DataSourceLoadOptionsBase options, CancellationToken cancellationToken)
        => await LoadCustomData(MyWebApiUrl + "Products", options, cancellationToken);

    protected async Task<LoadResult> LoadCustomData(string dataEndpointUri, DataSourceLoadOptionsBase options, CancellationToken cancellationToken) {
        exportUrlInfo.Clear();
        exportUrlInfo.Add(Tuple.Create(options.ConvertToGetRequestUri(MyWebApiUrl + "ExportedDocument") + "&format=pdf", "Export PDF"));
        exportUrlInfo.Add(Tuple.Create(options.ConvertToGetRequestUri(MyWebApiUrl + "ExportedDocument") + "&format=xlsx", "Export XLSX"));
        exportUrlInfo.Add(Tuple.Create(options.ConvertToGetRequestUri(MyWebApiUrl + "ExportedDocument") + "&format=docx", "Export DOCX"));

        using var response = await Client.GetAsync(options.ConvertToGetRequestUri(dataEndpointUri), cancellationToken);
        response.EnsureSuccessStatusCode();
        using var responseStream = await response.Content.ReadAsStreamAsync();
        return await JsonSerializer.DeserializeAsync<LoadResult>(responseStream, cancellationToken: cancellationToken);
    }
}
