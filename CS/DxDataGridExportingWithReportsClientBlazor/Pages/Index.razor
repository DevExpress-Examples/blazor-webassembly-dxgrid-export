@page "/"
@using DevExtreme.AspNet.Data.ResponseModel
@using DevExtreme.AspNet.Data
@using System.Threading
@using System.Threading.Tasks
@using DxDataGridExportingWithReportsClientBlazor.Models
@using System.Net.Http
@using System.Text.Json
@using System.Collections.ObjectModel
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient

<DxGrid Data="GridData" ShowFilterRow="true">
    <Columns>
        <DxGridDataColumn FieldName="ProductName" Width="25%"/>
        <DxGridDataColumn FieldName="CategoryId" />
        <DxGridDataColumn FieldName="UnitPrice" />
        <DxGridDataColumn FieldName="UnitsInStock" />
        <DxGridDataColumn FieldName="UnitsOnOrder" />
        <DxGridDataColumn FieldName="Discontinued" />
    </Columns>
</DxGrid>
<ExportButtons ExportUrlInfo="@exportUrlInfo"></ExportButtons>

@code {
    private readonly ObservableCollection<Tuple<string, string>> exportUrlInfo = new ObservableCollection<Tuple<string, string>>();
    private string MyWebApiUrl = "https://localhost:55040/api/Products/";
    object GridData { get; set; }

    protected override async Task OnInitializedAsync() {
        var uri = new Uri(MyWebApiUrl + "Products");
        var dataSource = new GridDevExtremeDataSource<Products>(HttpClient, uri);
        dataSource.CustomizeLoadOptions = (loadOptions) => {
            if (loadOptions.IsCountQuery == false) {
                exportUrlInfo.Clear();
                exportUrlInfo.Add(Tuple.Create(loadOptions.ConvertToGetRequestUri(MyWebApiUrl + "ExportedDocument") + "&format=pdf", "Export PDF"));
                exportUrlInfo.Add(Tuple.Create(loadOptions.ConvertToGetRequestUri(MyWebApiUrl + "ExportedDocument") + "&format=xlsx", "Export XLSX"));
                exportUrlInfo.Add(Tuple.Create(loadOptions.ConvertToGetRequestUri(MyWebApiUrl + "ExportedDocument") + "&format=docx", "Export DOCX"));
            }
        };
        GridData = dataSource;        
    }
}
